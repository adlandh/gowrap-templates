import (
    helpers "github.com/adlandh/gowrap-templates/helpers/otel"
    "go.opentelemetry.io/otel"
    "go.opentelemetry.io/otel/trace"
)

{{ $decorator := (or .Vars.DecoratorName (printf "%sWithTracing" .Interface.Name)) }}

// {{$decorator}} implements {{.Interface.Type}} interface instrumented with opentracing spans
type {{$decorator}}{{.Interface.Generics.Types}} struct {
  {{.Interface.Type}}{{.Interface.Generics.Params}}
  _spanDecorator func(span trace.Span, params, results map[string]interface{})
  _instance string
}

// New{{$decorator}} returns {{$decorator}}
func New{{$decorator}}{{.Interface.Generics.Types}} (base {{.Interface.Type}}{{$.Interface.Generics.Params}}, instance string, spanDecorator ...func(span trace.Span, params, results map[string]interface{})) {{$decorator}}{{.Interface.Generics.Params}} {
  d := {{$decorator}}{{$.Interface.Generics.Params}} {
    {{.Interface.Name}}: base,
    _instance: instance,
  }

  if len(spanDecorator) > 0 && spanDecorator[0] != nil {
    d._spanDecorator = spanDecorator[0]
  } else {
    d._spanDecorator = helpers.SpanDecorator
  }

  return d
}

{{range $method := .Interface.Methods}}
  {{if $method.AcceptsContext}}
    // {{$method.Name}} implements {{$.Interface.Type}}
func (_d {{$decorator}}{{$.Interface.Generics.Params}}) {{$method.Declaration}} {
  ctx, _span := otel.Tracer(_d._instance).Start(ctx, "{{$.Interface.Type}}.{{$method.Name}}")
  defer func() {
    _d._spanDecorator(_span, {{$method.ParamsMap}}, {{$method.ResultsMap}})
    _span.End()
  }()
  {{$method.Pass (printf "_d.%s." $.Interface.Name) }}
}
  {{end}}
{{end}}
