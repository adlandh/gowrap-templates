// Code generated by gowrap. DO NOT EDIT.
// template: https://raw.githubusercontent.com/adlandh/gowrap-templates/main/otel.gotmpl
// gowrap: http://github.com/hexdigest/gowrap

package main

//go:generate gowrap gen -p github.com/adlandh/gowrap-templates/examples/echo-otel -i AppInterface -t https://raw.githubusercontent.com/adlandh/gowrap-templates/main/otel.gotmpl -o aplication_sentry_gen.go -l ""

import (
	"context"
	"encoding/json"

	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/trace"
)

// AppInterfaceWithTracing implements AppInterface interface instrumented with opentracing spans
type AppInterfaceWithTracing[T any] struct {
	AppInterface[T]
	_instance      string
	_spanDecorator func(span trace.Span, params, results map[string]interface{})
}

// NewAppInterfaceWithTracing returns AppInterfaceWithTracing
func NewAppInterfaceWithTracing[T any](base AppInterface[T], instance string, spanDecorator ...func(span trace.Span, params, results map[string]interface{})) AppInterfaceWithTracing[T] {
	d := AppInterfaceWithTracing[T]{
		AppInterface: base,
		_instance:    instance,
	}

	if len(spanDecorator) > 0 && spanDecorator[0] != nil {
		d._spanDecorator = spanDecorator[0]
	} else {
		d._spanDecorator = d._defaultSpanDecorator
	}

	return d
}

func (_d AppInterfaceWithTracing[T]) _defaultSpanDecorator(span trace.Span, params, results map[string]interface{}) {
	for p := range params {
		switch params[p].(type) {
		case context.Context:
		default:
			val, _ := json.Marshal(params[p])
			span.SetAttributes(attribute.String("param."+p, string(val)))
		}
	}

	for p := range results {
		switch results[p].(type) {
		case context.Context:
		default:
			val, _ := json.Marshal(results[p])
			span.SetAttributes(attribute.String("result."+p, string(val)))
		}
	}
}

// GenFullGreeting implements AppInterface
func (_d AppInterfaceWithTracing[T]) GenFullGreeting(ctx context.Context, name T) (greeting string, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "AppInterface.GenFullGreeting")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":  ctx,
				"name": name}, map[string]interface{}{
				"greeting": greeting,
				"err":      err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.AppInterface.GenFullGreeting(ctx, name)
}

// GetGreeting implements AppInterface
func (_d AppInterfaceWithTracing[T]) GetGreeting(ctx context.Context) (greeting T) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "AppInterface.GetGreeting")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx}, map[string]interface{}{
				"greeting": greeting})
		}
		_span.End()
	}()
	return _d.AppInterface.GetGreeting(ctx)
}

// SetGreeting implements AppInterface
func (_d AppInterfaceWithTracing[T]) SetGreeting(ctx context.Context, greeting T) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "AppInterface.SetGreeting")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":      ctx,
				"greeting": greeting}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.AppInterface.SetGreeting(ctx, greeting)
}
