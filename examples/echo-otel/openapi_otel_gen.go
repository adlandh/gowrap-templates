package main

// Code generated by gowrap. DO NOT EDIT.
// template: ../../echo-otel.gotmpl
// gowrap: http://github.com/hexdigest/gowrap

//go:generate gowrap gen -p github.com/adlandh/gowrap-templates/examples/echo -i ServerInterface -t https://raw.githubusercontent.com/adlandh/gowrap-templates/main/echo-otel.gotmpl -o openapi_otel_gen.go -l ""

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/labstack/echo/v4"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/trace"
)

func defaultSpanDecorator(span trace.Span, params, results map[string]interface{}) {
	for p := range params {
		switch params[p].(type) {
		case context.Context:
		case *http.Request:
			span.SetAttributes(attribute.String("param."+p+".method", params[p].(*http.Request).Method))
			val, _ := json.Marshal(params[p].(*http.Request).Header)
			span.SetAttributes(attribute.String("param."+p+".headers", string(val)))
		case *http.Response:
			val, _ := json.Marshal(params[p].(*http.Response).Header)
			span.SetAttributes(attribute.String("param."+p+".headers", string(val)))
		case echo.Context:
		default:
			val, _ := json.Marshal(params[p])
			span.SetAttributes(attribute.String("param."+p, string(val)))
		}
	}

	for p := range results {
		switch results[p].(type) {
		case context.Context:
		case *http.Response:
			val, _ := json.Marshal(results[p].(*http.Response).Header)
			span.SetAttributes(attribute.String("result."+p+".headers", string(val)))
		default:
			val, _ := json.Marshal(results[p])
			span.SetAttributes(attribute.String("result."+p, string(val)))
		}
	}
}

// ServerInterfaceWithTracing implements ServerInterface interface instrumented with opentracing spans
type ServerInterfaceWithTracing struct {
	ServerInterface
	_instance      string
	_spanDecorator func(span trace.Span, params, results map[string]interface{})
}

// NewServerInterfaceWithTracing returns ServerInterfaceWithTracing
func NewServerInterfaceWithTracing(base ServerInterface, instance string, spanDecorator ...func(span trace.Span, params, results map[string]interface{})) ServerInterfaceWithTracing {
	d := ServerInterfaceWithTracing{
		ServerInterface: base,
		_instance:       instance,
	}

	if len(spanDecorator) > 0 && spanDecorator[0] != nil {
		d._spanDecorator = spanDecorator[0]
	} else {
		d._spanDecorator = defaultSpanDecorator
	}

	return d
}

// GetGreeting implements ServerInterface
func (_d ServerInterfaceWithTracing) GetGreeting(ctx echo.Context) (err error) {
	request := ctx.Request()
	ctxNew, _span := otel.Tracer(_d._instance).Start(request.Context(), "ServerInterface.GetGreeting")

	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	ctx.SetRequest(request.WithContext(ctxNew))
	return _d.ServerInterface.GetGreeting(ctx)
}

// GetHello implements ServerInterface
func (_d ServerInterfaceWithTracing) GetHello(ctx echo.Context, name string) (err error) {
	request := ctx.Request()
	ctxNew, _span := otel.Tracer(_d._instance).Start(request.Context(), "ServerInterface.GetHello")

	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":  ctx,
				"name": name}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	ctx.SetRequest(request.WithContext(ctxNew))
	return _d.ServerInterface.GetHello(ctx, name)
}

// SetGreeting implements ServerInterface
func (_d ServerInterfaceWithTracing) SetGreeting(ctx echo.Context, greeting string) (err error) {
	request := ctx.Request()
	ctxNew, _span := otel.Tracer(_d._instance).Start(request.Context(), "ServerInterface.SetGreeting")

	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":      ctx,
				"greeting": greeting}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	ctx.SetRequest(request.WithContext(ctxNew))
	return _d.ServerInterface.SetGreeting(ctx, greeting)
}
