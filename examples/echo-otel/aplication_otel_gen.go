// Code generated by gowrap. DO NOT EDIT.
// template: ../../otel.gotmpl
// gowrap: http://github.com/hexdigest/gowrap

package main

import (
	"context"

	helpers "github.com/adlandh/gowrap-templates/helpers/otel"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/trace"
)

// AppInterfaceWithTracing implements AppInterface interface instrumented with opentracing spans
type AppInterfaceWithTracing[T any] struct {
	AppInterface[T]
	_spanDecorator func(span trace.Span, params, results map[string]interface{})
	_instance      string
}

// NewAppInterfaceWithTracing returns AppInterfaceWithTracing
func NewAppInterfaceWithTracing[T any](base AppInterface[T], instance string, spanDecorator ...func(span trace.Span, params, results map[string]interface{})) AppInterfaceWithTracing[T] {
	d := AppInterfaceWithTracing[T]{
		AppInterface: base,
		_instance:    instance,
	}

	if len(spanDecorator) > 0 && spanDecorator[0] != nil {
		d._spanDecorator = spanDecorator[0]
	} else {
		d._spanDecorator = helpers.SpanDecorator
	}

	return d
}

// GenFullGreeting implements AppInterface
func (_d AppInterfaceWithTracing[T]) GenFullGreeting(ctx context.Context, name T) (greeting string, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "AppInterface.GenFullGreeting")
	defer func() {
		_d._spanDecorator(_span, map[string]interface{}{
			"ctx":  ctx,
			"name": name}, map[string]interface{}{
			"greeting": greeting,
			"err":      err})
		_span.End()
	}()
	return _d.AppInterface.GenFullGreeting(ctx, name)
}

// GetGreeting implements AppInterface
func (_d AppInterfaceWithTracing[T]) GetGreeting(ctx context.Context) (greeting T) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "AppInterface.GetGreeting")
	defer func() {
		_d._spanDecorator(_span, map[string]interface{}{
			"ctx": ctx}, map[string]interface{}{
			"greeting": greeting})
		_span.End()
	}()
	return _d.AppInterface.GetGreeting(ctx)
}

// SetGreeting implements AppInterface
func (_d AppInterfaceWithTracing[T]) SetGreeting(ctx context.Context, greeting T) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "AppInterface.SetGreeting")
	defer func() {
		_d._spanDecorator(_span, map[string]interface{}{
			"ctx":      ctx,
			"greeting": greeting}, map[string]interface{}{
			"err": err})
		_span.End()
	}()
	return _d.AppInterface.SetGreeting(ctx, greeting)
}
