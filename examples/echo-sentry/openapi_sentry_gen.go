// Code generated by gowrap. DO NOT EDIT.
// template: https://raw.githubusercontent.com/adlandh/gowrap-templates/main/echo-sentry.gotmpl
// gowrap: http://github.com/hexdigest/gowrap

package main

import (
	"github.com/labstack/echo/v4"

	helpers "github.com/adlandh/gowrap-templates/helpers/sentry"
	"github.com/getsentry/sentry-go"
)

// ServerInterfaceWithSentry implements ServerInterface interface instrumented with opentracing spans
type ServerInterfaceWithSentry struct {
	ServerInterface
	_spanDecorator func(span *sentry.Span, params, results map[string]interface{})
	_instance      string
}

// NewServerInterfaceWithSentry returns ServerInterfaceWithSentry
func NewServerInterfaceWithSentry(base ServerInterface, instance string, spanDecorator ...func(span *sentry.Span, params, results map[string]interface{})) ServerInterfaceWithSentry {
	d := ServerInterfaceWithSentry{
		ServerInterface: base,
		_instance:       instance,
	}

	if len(spanDecorator) > 0 && spanDecorator[0] != nil {
		d._spanDecorator = spanDecorator[0]
	} else {
		d._spanDecorator = helpers.SpanDecorator
	}

	return d
}

// GetGreeting implements ServerInterface
func (_d ServerInterfaceWithSentry) GetGreeting(ctx echo.Context) (err error) {
	request := ctx.Request()
	savedCtx := request.Context()
	span := sentry.StartSpan(savedCtx, _d._instance+".ServerInterface.GetGreeting", sentry.WithTransactionName("ServerInterface.GetGreeting"))
	ctxNew := span.Context()

	defer func() {
		_d._spanDecorator(span, map[string]interface{}{
			"ctx": ctx}, map[string]interface{}{
			"err": err})
		span.Finish()
	}()
	ctx.SetRequest(request.WithContext(ctxNew))
	return _d.ServerInterface.GetGreeting(ctx)
}

// SayHello implements ServerInterface
func (_d ServerInterfaceWithSentry) SayHello(ctx echo.Context, name string) (err error) {
	request := ctx.Request()
	savedCtx := request.Context()
	span := sentry.StartSpan(savedCtx, _d._instance+".ServerInterface.SayHello", sentry.WithTransactionName("ServerInterface.SayHello"))
	ctxNew := span.Context()

	defer func() {
		_d._spanDecorator(span, map[string]interface{}{
			"ctx":  ctx,
			"name": name}, map[string]interface{}{
			"err": err})
		span.Finish()
	}()
	ctx.SetRequest(request.WithContext(ctxNew))
	return _d.ServerInterface.SayHello(ctx, name)
}

// SetGreeting implements ServerInterface
func (_d ServerInterfaceWithSentry) SetGreeting(ctx echo.Context, greeting string) (err error) {
	request := ctx.Request()
	savedCtx := request.Context()
	span := sentry.StartSpan(savedCtx, _d._instance+".ServerInterface.SetGreeting", sentry.WithTransactionName("ServerInterface.SetGreeting"))
	ctxNew := span.Context()

	defer func() {
		_d._spanDecorator(span, map[string]interface{}{
			"ctx":      ctx,
			"greeting": greeting}, map[string]interface{}{
			"err": err})
		span.Finish()
	}()
	ctx.SetRequest(request.WithContext(ctxNew))
	return _d.ServerInterface.SetGreeting(ctx, greeting)
}
