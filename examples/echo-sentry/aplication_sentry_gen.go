// Code generated by gowrap. DO NOT EDIT.
// template: https://raw.githubusercontent.com/adlandh/gowrap-templates/main/sentry.gotmpl
// gowrap: http://github.com/hexdigest/gowrap

package main

//go:generate gowrap gen -p github.com/adlandh/gowrap-templates/examples/echo-sentry -i AppInterface -t https://raw.githubusercontent.com/adlandh/gowrap-templates/main/sentry.gotmpl -o aplication_sentry_gen.go -l ""

import (
	"context"

	helpers "github.com/adlandh/gowrap-templates/helpers/sentry"
	"github.com/getsentry/sentry-go"
)

// AppInterfaceWithSentry implements AppInterface interface instrumented with opentracing spans
type AppInterfaceWithSentry[T any] struct {
	AppInterface[T]
	_instance      string
	_spanDecorator func(span *sentry.Span, params, results map[string]interface{})
}

// NewAppInterfaceWithSentry returns AppInterfaceWithSentry
func NewAppInterfaceWithSentry[T any](base AppInterface[T], instance string, spanDecorator ...func(span *sentry.Span, params, results map[string]interface{})) AppInterfaceWithSentry[T] {
	d := AppInterfaceWithSentry[T]{
		AppInterface: base,
		_instance:    instance,
	}

	if len(spanDecorator) > 0 && spanDecorator[0] != nil {
		d._spanDecorator = spanDecorator[0]
	} else {
		d._spanDecorator = helpers.SpanDecorator
	}

	return d
}

// GenFullGreeting implements AppInterface
func (_d AppInterfaceWithSentry[T]) GenFullGreeting(ctx context.Context, name T) (greeting T, err error) {
	span := sentry.StartSpan(ctx, _d._instance+".AppInterface.GenFullGreeting", sentry.WithTransactionName("AppInterface.GenFullGreeting"))
	ctx = span.Context()

	defer func() {
		_d._spanDecorator(span, map[string]interface{}{
			"ctx":  ctx,
			"name": name}, map[string]interface{}{
			"greeting": greeting,
			"err":      err})
		span.Finish()
	}()
	return _d.AppInterface.GenFullGreeting(ctx, name)
}

// GetGreeting implements AppInterface
func (_d AppInterfaceWithSentry[T]) GetGreeting(ctx context.Context) (greeting T) {
	span := sentry.StartSpan(ctx, _d._instance+".AppInterface.GetGreeting", sentry.WithTransactionName("AppInterface.GetGreeting"))
	ctx = span.Context()

	defer func() {
		_d._spanDecorator(span, map[string]interface{}{
			"ctx": ctx}, map[string]interface{}{
			"greeting": greeting})
		span.Finish()
	}()
	return _d.AppInterface.GetGreeting(ctx)
}

// SetGreeting implements AppInterface
func (_d AppInterfaceWithSentry[T]) SetGreeting(ctx context.Context, greeting T) (err error) {
	span := sentry.StartSpan(ctx, _d._instance+".AppInterface.SetGreeting", sentry.WithTransactionName("AppInterface.SetGreeting"))
	ctx = span.Context()

	defer func() {
		_d._spanDecorator(span, map[string]interface{}{
			"ctx":      ctx,
			"greeting": greeting}, map[string]interface{}{
			"err": err})
		span.Finish()
	}()
	return _d.AppInterface.SetGreeting(ctx, greeting)
}
