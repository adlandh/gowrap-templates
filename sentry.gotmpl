import (
    "context"
    "encoding/json"
    "net/http"

    "github.com/getsentry/sentry-go"
)

{{ $decorator := (or .Vars.DecoratorName (printf "%sWithSentry" .Interface.Name)) }}

// {{$decorator}} implements {{.Interface.Type}} interface instrumented with opentracing spans
type {{$decorator}}{{.Interface.Generics.Types}} struct {
    {{.Interface.Type}}{{.Interface.Generics.Params}}
    _instance string
    _spanDecorator func(span *sentry.Span, params, results map[string]interface{})
}

// New{{$decorator}} returns {{$decorator}}
func New{{$decorator}}{{.Interface.Generics.Types}} (base {{.Interface.Type}}{{.Interface.Generics.Params}}, instance string, spanDecorator ...func(span *sentry.Span, params, results map[string]interface{})) {{$decorator}}{{.Interface.Generics.Params}} {
    d := {{$decorator}}{{.Interface.Generics.Params}}  {
        {{.Interface.Name}}: base,
        _instance: instance,
    }

    if len(spanDecorator) > 0 && spanDecorator[0] != nil {
        d._spanDecorator = spanDecorator[0]
    } else {
        d._spanDecorator = d._defaultSpanDecorator
    }

    return d
}

func (_d {{$decorator}}{{.Interface.Generics.Params}}) _defaultSpanDecorator(span *sentry.Span, params, results map[string]interface{}) {
    for p := range params {
        switch params[p].(type) {
        case context.Context:
        default:
            val, _ := json.Marshal(params[p])
            span.SetTag("param."+p, string(val))
        }
    }

    for p := range results {
        switch results[p].(type) {
        case context.Context:
        default:
            val, _ := json.Marshal(results[p])
            span.SetTag("result."+p, string(val))
        }
    }
}


{{range $method := .Interface.Methods}}
    {{if $method.AcceptsContext}}
        // {{$method.Name}} implements {{.Interface.Type}}
        func (_d {{$decorator}}{{.Interface.Generics.Params}}) {{$method.Declaration}} {
                span := sentry.StartSpan(ctx, _d._instance+".{{.Interface.Type}}.{{$method.Name}}", sentry.TransactionName("{{.Interface.Type}}.{{$method.Name}}"))
                ctx = span.Context()

                defer func() {
                    _d._spanDecorator(span, {{$method.ParamsMap}}, {{$method.ResultsMap}})
                    {{- if $method.ReturnsError}}
                    if err != nil {
                        span.SetTag("event", "error")
                        span.SetTag("message", err.Error())
                    }
                    {{end}}
                    span.Finish()
                }()
            {{$method.Pass (printf "_d.%s." .Interface.Name) }}
        }
    {{end}}
{{end}}
