import (
    helpers "github.com/adlandh/gowrap-templates/helpers/sentry"
    "github.com/getsentry/sentry-go"
)

{{ $decorator := (or .Vars.DecoratorName (printf "%sWithSentry" .Interface.Name)) }}

// {{$decorator}} implements {{.Interface.Type}} interface instrumented with opentracing spans
type {{$decorator}}{{.Interface.Generics.Types}} struct {
    {{.Interface.Type}}{{.Interface.Generics.Params}}
    _spanDecorator func(span *sentry.Span, params, results map[string]interface{})
    _instance string
}

// New{{$decorator}} returns {{$decorator}}
func New{{$decorator}}{{.Interface.Generics.Types}} (base {{.Interface.Type}}{{$.Interface.Generics.Params}}, instance string, spanDecorator ...func(span *sentry.Span, params, results map[string]interface{})) {{$decorator}}{{.Interface.Generics.Params}} {
    d := {{$decorator}}{{$.Interface.Generics.Params}}  {
        {{.Interface.Name}}: base,
        _instance: instance,
    }

    if len(spanDecorator) > 0 && spanDecorator[0] != nil {
        d._spanDecorator = spanDecorator[0]
    } else {
        d._spanDecorator = helpers.SpanDecorator
    }

    return d
}

{{range $method := .Interface.Methods}}
    {{if $method.AcceptsContext}}
        // {{$method.Name}} implements {{$.Interface.Type}}
        func (_d {{$decorator}}{{$.Interface.Generics.Params}}) {{$method.Declaration}} {
                span := sentry.StartSpan(ctx, _d._instance+".{{$.Interface.Type}}.{{$method.Name}}", sentry.WithTransactionName("{{$.Interface.Type}}.{{$method.Name}}"))
                ctx = span.Context()

                defer func() {
                    _d._spanDecorator(span, {{$method.ParamsMap}}, {{$method.ResultsMap}})
                    span.Finish()
                }()
            {{$method.Pass (printf "_d.%s." $.Interface.Name) }}
        }
    {{end}}
{{end}}
