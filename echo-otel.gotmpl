import (
    "context"
    "encoding/json"
    "net/http"

    "github.com/labstack/echo/v4"
    "go.opentelemetry.io/otel"
    "go.opentelemetry.io/otel/attribute"
    "go.opentelemetry.io/otel/trace"
)

{{ $decorator := (or .Vars.DecoratorName (printf "%sWithTracing" .Interface.Name)) }}

// {{$decorator}} implements {{.Interface.Type}} interface instrumented with opentracing spans
type {{$decorator}} struct {
    {{.Interface.Type}}
    _instance string
    _spanDecorator func(span trace.Span, params, results map[string]interface{})
}

// New{{$decorator}} returns {{$decorator}}
func New{{$decorator}} (base {{.Interface.Type}}, instance string, spanDecorator ...func(span trace.Span, params, results map[string]interface{})) {{$decorator}} {
    d := {{$decorator}} {
        {{.Interface.Name}}: base,
        _instance: instance,
    }

    if len(spanDecorator) > 0 && spanDecorator[0] != nil {
        d._spanDecorator = spanDecorator[0]
    } else {
        d._spanDecorator = d._defaultSpanDecorator
    }

    return d
}

func (_d {{$decorator}}) _defaultSpanDecorator(span trace.Span, params, results map[string]interface{}) {
    for p := range params {
        switch params[p].(type) {
            case context.Context:
            case *http.Request:
                span.SetAttributes(attribute.String("param."+p+".method", params[p].(*http.Request).Method))
                val, _ := json.Marshal(params[p].(*http.Request).Header)
                span.SetAttributes(attribute.String("param."+p+".headers", string(val)))
            case *http.Response:
                val, _ := json.Marshal(params[p].(*http.Response).Header)
                span.SetAttributes(attribute.String("param."+p+".headers", string(val)))
            case echo.Context:
            default:
                val, _ := json.Marshal(params[p])
                span.SetAttributes(attribute.String("param."+p, string(val)))
        }
    }

    for p := range results {
        switch results[p].(type) {
            case context.Context:
            case *http.Response:
                val, _ := json.Marshal(results[p].(*http.Response).Header)
                span.SetAttributes(attribute.String("result."+p+".headers", string(val)))
        default:
            val, _ := json.Marshal(results[p])
            span.SetAttributes(attribute.String("result."+p, string(val)))
        }
    }
}


{{range $method := .Interface.Methods}}
    {{if $method.AcceptsContext}}
        // {{$method.Name}} implements {{$.Interface.Type}}
        func (_d {{$decorator}}) {{$method.Declaration}} {
        request := ctx.Request()
        ctxNew, _span := otel.Tracer(_d._instance).Start(request.Context(), "{{$.Interface.Type}}.{{$method.Name}}")

        defer func() {
            if _d._spanDecorator != nil {
            _d._spanDecorator(_span, {{$method.ParamsMap}}, {{$method.ResultsMap}})
            }{{- if $method.ReturnsError}} else if err != nil {
                _span.RecordError(err)
                _span.SetAttributes(
                    attribute.String("event", "error"),
                    attribute.String("message", err.Error()),
                )
            }
        {{end}}
            _span.End()
        }()
        ctx.SetRequest(request.WithContext(ctxNew))
        {{$method.Pass (printf "_d.%s." $.Interface.Name) }}
        }
    {{end}}
{{end}}
